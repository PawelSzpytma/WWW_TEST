"use strict";
var WWW;
(function (WWW) {
    var Api;
    (function (Api) {
        class ClientBase {
            transformOptions(options) {
                options.credentials = "same-origin";
                return Promise.resolve(options);
            }
        }
        /* tslint:disable */
        /* eslint-disable */
        //----------------------
        // <auto-generated>
        //     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
        // </auto-generated>
        //----------------------
        // ReSharper disable InconsistentNaming
        class ApiClient extends ClientBase {
            constructor(baseUrl, http) {
                super();
                this.jsonParseReviver = undefined;
                this.http = http ? http : window;
                this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
            }
            /**
             * @return Success
             */
            getWeatherForecast() {
                let url_ = this.baseUrl + "/WeatherForecast";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.transformOptions(options_).then(transformedOptions_ => {
                    return this.http.fetch(url_, transformedOptions_);
                }).then((_response) => {
                    return this.processGetWeatherForecast(_response);
                });
            }
            processGetWeatherForecast(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (let item of resultData200)
                                result200.push(WeatherForecast.fromJS(item));
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
        }
        Api.ApiClient = ApiClient;
        class WeatherForecast {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
                if (_data) {
                    this.date = _data["date"] ? new Date(_data["date"].toString()) : null;
                    this.temperatureC = _data["temperatureC"] !== undefined ? _data["temperatureC"] : null;
                    this.temperatureF = _data["temperatureF"] !== undefined ? _data["temperatureF"] : null;
                    this.summary = _data["summary"] !== undefined ? _data["summary"] : null;
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new WeatherForecast();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["date"] = this.date ? this.date.toISOString() : null;
                data["temperatureC"] = this.temperatureC !== undefined ? this.temperatureC : null;
                data["temperatureF"] = this.temperatureF !== undefined ? this.temperatureF : null;
                data["summary"] = this.summary !== undefined ? this.summary : null;
                return data;
            }
        }
        Api.WeatherForecast = WeatherForecast;
        class ApiException extends Error {
            constructor(message, status, response, headers, result) {
                super();
                this.isApiException = true;
                this.message = message;
                this.status = status;
                this.response = response;
                this.headers = headers;
                this.result = result;
            }
            static isApiException(obj) {
                return obj.isApiException === true;
            }
        }
        Api.ApiException = ApiException;
        function throwException(message, status, response, headers, result) {
            if (result !== null && result !== undefined)
                throw result;
            else
                throw new ApiException(message, status, response, headers, null);
        }
    })(Api = WWW.Api || (WWW.Api = {}));
})(WWW || (WWW = {}));
